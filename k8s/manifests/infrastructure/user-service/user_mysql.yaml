apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: user-mysql
  name: user-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-mysql
  strategy: {}
  template:
    metadata:
      labels:
        app: user-mysql
    spec:
      containers:
        - image: mysql:8.3
          name: user-mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: mysql
            - name: MYSQL_DATABASE
              value: fooddelivery
            - name: MYSQL_USER
              value: user
            - name: MYSQL_PASSWORD
              value: password
          args:
            - --default-authentication-plugin=mysql_native_password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: user-mysql-data
              mountPath: /var/lib/mysql
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: user-mysql-data
          persistentVolumeClaim:
            claimName: user-mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: user-mysql
  name: user-mysql
spec:
  ports:
    - port: 3316
      protocol: TCP
      targetPort: 3306
  selector:
    app: user-mysql

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: user-mysql-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /data/user-mysql

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-mysql-initdb-config
data:
  initdb.sql: |
    CREATE DATABASE IF NOT EXISTS user_service;